{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";;;;AAGA,gCAA8B,4BAA4B,CAAC,CAAA;AAC3D,0BAAwB,wBAAwB,CAAC,CAAA;AACjD,0BAA+B,aAAa,CAAC,CAAA;AAE7C,4EAA4E;AAC5E,oCAAoC;AACpC,4EAA4E;AAE5E,iBAAc,aAAa,CAAC,EAAA;AAC5B,iBAAc,wBAAwB,CAAC,EAAA;AAGvC,iBAAc,8BAA8B,CAAC,EAAA;AAI7C,iBAAc,8BAA8B,CAAC,EAAA;AAC7C,iBAAc,wBAAwB,CAAC,EAAA;AAEvC,iBAAc,sBAAsB,CAAC,EAAA;AAgBrC;;GAEG;AACH,kBAAyB,kBAAiC,EACjC,yBAAmD,EACnD,qBAAwC;IAC7D,EAAE,CAAC,CAAC,OAAO,kBAAkB,KAAK,QAAQ,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,4BAAgB,CAAC,qBAAS,CAAC,CAAC,QAAQ,CAAC,kBAA4B,EAAE,yBAAmC,EAAE,qBAAqB,CAAC,CAAC;IAC1I,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,MAAM,CAAC,4BAAgB,CAAC,qBAAS,CAAC,CAAC,QAAQ,CAAC,kBAA4B,EAAE,yBAA6C,CAAC,CAAC;IAC7H,CAAC;AACL,CAAC;AARe,gBAAQ,WAQvB,CAAA;AAYD;;GAEG;AACH,0BAAiC,kBAAiC,EACzC,yBAAmD,EACnD,qBAAwC;IAC7D,EAAE,CAAC,CAAC,OAAO,kBAAkB,KAAK,QAAQ,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,4BAAgB,CAAC,qBAAS,CAAC,CAAC,gBAAgB,CAAC,kBAA4B,EAAE,yBAAmC,EAAE,qBAAqB,CAAC,CAAC;IAClJ,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,MAAM,CAAC,4BAAgB,CAAC,qBAAS,CAAC,CAAC,gBAAgB,CAAC,kBAA4B,EAAE,yBAA6C,CAAC,CAAC;IACrI,CAAC;AACL,CAAC;AARe,wBAAgB,mBAQ/B,CAAA;AAgBD;;;;GAIG;AACH,sBAA6B,kBAAiC,EACjC,yBAAmD,EACnD,qBAAwC;IACjE,EAAE,CAAC,CAAC,OAAO,kBAAkB,KAAK,QAAQ,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,4BAAgB,CAAC,qBAAS,CAAC,CAAC,YAAY,CAAC,kBAA4B,EAAE,yBAAmC,EAAE,qBAAqB,CAAC,CAAC;IAC9I,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,MAAM,CAAC,4BAAgB,CAAC,qBAAS,CAAC,CAAC,YAAY,CAAC,kBAA4B,EAAE,yBAA6C,CAAC,CAAC;IACjI,CAAC;AACL,CAAC;AARe,oBAAY,eAQ3B,CAAA;AAED;;GAEG;AACH,wBAA+B,MAAwB;IACnD,4BAAgB,CAAC,iCAAe,CAAC,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;AAClE,CAAC;AAFe,sBAAc,iBAE7B,CAAA","file":"index.js","sourcesContent":["import {ValidationError} from \"./validation/ValidationError\";\nimport {ValidatorOptions} from \"./validation/ValidatorOptions\";\nimport {ValidationSchema} from \"./validation-schema/ValidationSchema\";\nimport {MetadataStorage} from \"./metadata/MetadataStorage\";\nimport {Validator} from \"./validation/Validator\";\nimport {getFromContainer} from \"./container\";\n\n// -------------------------------------------------------------------------\n// Export everything api users needs\n// -------------------------------------------------------------------------\n\nexport * from \"./container\";\nexport * from \"./decorator/decorators\";\nexport * from \"./decorator/ValidationOptions\";\nexport * from \"./validation/ValidatorConstraintInterface\";\nexport * from \"./validation/ValidationError\";\nexport * from \"./validation/ValidationTypeOptions\";\nexport * from \"./validation/ValidatorOptions\";\nexport * from \"./validation/ValidationArguments\";\nexport * from \"./validation/ValidationTypes\";\nexport * from \"./validation/Validator\";\nexport * from \"./validation-schema/ValidationSchema\";\nexport * from \"./register-decorator\";\n\n// -------------------------------------------------------------------------\n// Shortcut methods for api users\n// -------------------------------------------------------------------------\n\n/**\n * Validates given object.\n */\nexport function validate(object: Object, validatorOptions?: ValidatorOptions): Promise<ValidationError[]>;\n\n/**\n * Validates given object by a given validation schema.\n */\nexport function validate(schemaName: string, object: Object, validatorOptions?: ValidatorOptions): Promise<ValidationError[]>;\n\n/**\n * Validates given object by object's decorators or given validation schema.\n */\nexport function validate(schemaNameOrObject: Object|string, \n                         objectOrValidationOptions?: Object|ValidatorOptions, \n                         maybeValidatorOptions?: ValidatorOptions): Promise<ValidationError[]> {\n    if (typeof schemaNameOrObject === \"string\") {\n        return getFromContainer(Validator).validate(schemaNameOrObject as string, objectOrValidationOptions as Object, maybeValidatorOptions);\n    } else {\n        return getFromContainer(Validator).validate(schemaNameOrObject as Object, objectOrValidationOptions as ValidatorOptions);\n    }\n}\n\n/**\n * Validates given object and reject on error.\n */\nexport function validateOrReject(object: Object, validatorOptions?: ValidatorOptions): Promise<void>;\n\n/**\n * Validates given object by a given validation schema and reject on error.\n */\nexport function validateOrReject(schemaName: string, object: Object, validatorOptions?: ValidatorOptions): Promise<void>;\n\n/**\n * Validates given object by object's decorators or given validation schema and reject on error.\n */\nexport function validateOrReject(schemaNameOrObject: Object|string, \n                         objectOrValidationOptions?: Object|ValidatorOptions, \n                         maybeValidatorOptions?: ValidatorOptions): Promise<void> {\n    if (typeof schemaNameOrObject === \"string\") {\n        return getFromContainer(Validator).validateOrReject(schemaNameOrObject as string, objectOrValidationOptions as Object, maybeValidatorOptions);\n    } else {\n        return getFromContainer(Validator).validateOrReject(schemaNameOrObject as Object, objectOrValidationOptions as ValidatorOptions);\n    }\n}\n\n/**\n * Performs sync validation of the given object. \n * Note that this method completely ignores async validations.\n * If you want to properly perform validation you need to call validate method instead.\n */\nexport function validateSync(object: Object, validatorOptions?: ValidatorOptions): ValidationError[];\n\n/**\n * Validates given object by a given validation schema.\n * Note that this method completely ignores async validations.\n * If you want to properly perform validation you need to call validate method instead.\n */\nexport function validateSync(schemaName: string, object: Object, validatorOptions?: ValidatorOptions): ValidationError[];\n\n/**\n * Validates given object by object's decorators or given validation schema.\n * Note that this method completely ignores async validations.\n * If you want to properly perform validation you need to call validate method instead.\n */\nexport function validateSync(schemaNameOrObject: Object|string, \n                             objectOrValidationOptions?: Object|ValidatorOptions, \n                             maybeValidatorOptions?: ValidatorOptions): ValidationError[] {\n    if (typeof schemaNameOrObject === \"string\") {\n        return getFromContainer(Validator).validateSync(schemaNameOrObject as string, objectOrValidationOptions as Object, maybeValidatorOptions);\n    } else {\n        return getFromContainer(Validator).validateSync(schemaNameOrObject as Object, objectOrValidationOptions as ValidatorOptions);\n    }\n}\n\n/**\n * Registers a new validation schema.\n */\nexport function registerSchema(schema: ValidationSchema): void {\n    getFromContainer(MetadataStorage).addValidationSchema(schema);\n}\n"],"sourceRoot":"."}